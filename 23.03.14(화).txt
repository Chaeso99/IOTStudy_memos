23.03.14(화)
<정보처리기사 공부방법>(필기 실기 둘다 똑같이)
필기책-시나공 같은거
기출사이트-CBT 등
정보처리기사 단톡방/수제비 카페 등 커뮤니티-문제풀기
오답노트

필기책 1회독(빠르게)하면서 책에 있는 문제 다 풀어보기=>틀린문제 오답노트(블로그 등에)
필기책 2회독(암기 안되는 부분 집중적으로)보기
CBT 문제 풀고 오답노트(하루에 N회분씩)
정처기 단톡방에서 공유받은 문제 풀고 오답노트
---------------------------------------------------------------------------------------------------------
<오전수업>
.붙은 폴더들(설정 파일) 다 삭제(안스 플러터 폴더 보낼때/받을때)

어제 예제들 화면 구성 방법(동의모바일)
화면전체는 MaterialApp으로 감싼 다음 Scaffold, SafeArea 적용
맨위 모바일ID 있는 칸은 AppBar / 상자를 하나 만드는데(ROW로 
사진칸|특별열람증칸-각각 이미지/글자로 나눔) padding 들어가있음(상하좌우), 
모서리 둥근건 borderradius 사용 
아래 상자를 하나 더 만들고(학사안내, 기숙사 등 아이콘 들어가있는것-GridView 또는 이미지 한장씩 
넣고 가로선/세로선 넣기)
+박스(모바일ID~환경설정)
+네비게이션 바(||| ㅁ < 있는칸)

요즘은 stateful을 잘 사용하진 않음(코드가 장황하고 복잡해서 외부 라이브러리를 주로 사용)
화면이 뭔가 동작하는건 전부 stateful이다.
상태 라는건 우리가 프로그래밍 할때 화면에 구현되는게 보통 
버튼->로직이 실행되어서->화면이 바뀐다 같은 방식인데 State는 버튼을 누르면->값이 바뀌어서
->화면이 바뀐다.

html/js 기존 방식
<div id="hello">안녕</div>
<button>버튼</button>
자스에서 쟤를 컨트롤 하려면 함수를 만들어야됨
const el = document.getElementById("hello");
el.innerText = "안녕";

state방식을 사용하면
<div id="hello">${data}</div>
<button>버튼</button>
버튼을 누르면 data="안녕";으로 상태만 변경($ 표시는 언어마다 포함여부가 다름)

stateless방식으로 하면 홈페이지가 새로 불러와지는데 statefull방식은 안의 내용만 바뀜

stateful 위젯으로 부모/자식1/자식2
케이스1:부모가 state를 들고 있을 때(가장 보편적인 방법)
자식1은 부모의 state를 변경/자식2는 부모의 state를 출력하기
(flutter_stateful_1 예제)

Iterable/Stream/Future
Future-자스 promise와 비슷함(열리지 않는 택배상자-안에 내용물이 도착하면 열수있음)
promise.then()했던것처럼 Future.then()해서 씀

Iterable-나열할 수 있는 것(list/set/map 등등

코딩할때 남들이 봤을때 이해하기 쉬운 코드가 좋은 코드다

<자바 Stream/ 다트 Stream>
자바 Stream
- 자바 Collections를 가공할 때 사용한다.
- 한꺼번에 처리된다.

다트 Stream
- 비동기 데이터를 처리할 때 사용한다.
- 언제 들어올지 모르는 데이터.
- 실시간 데이터가 들어올 때마다 처리된다.

수도꼭지에서 물이 들어가는공간 sink/물이 나오는공간 stream

Dart_Study-Master 폴더의 temp.java 예제

flutter_stream_counter 예제(stream 이용 stateless 방식으로 카운터 늘어나는 버튼 만들기)
ㄴ화면이랑 기능이 동작하는(데이터 컨트롤하는) 파일은 나눠져 있어야 함. 
JSP 할때도 mvc 패턴을 나중에 배울것임

보통 페이지 단위를 Scaffold로 나눈다.
---------------------------------------------------------------------------------------------------
<오후수업>
여러가지 유용한 라이브러리 학습/실습

상태관리 라이브러리
ㄴ화면과 비지니스로직이 분리될 수 있는 것
bloc/cubit
provider //전역 상태 관리-위젯 간의 데이터 전달이 쉽다, 로그인/테마
hooks //개별 위젯 상태 관리

riverpod
getx - 상태관리
/페이지이동/창띄우기/통신  //제일 유명함, 기능이 다양함

flutter_provider_hooks 예제
hooks는 리액트의 함수형 컴포넌트의 상태관리 기능이다. flutter_hooks는 리액트의 hooks를 따라
만들었다. 내용이 완전 같음 hooks는 무조건 build 밑에 만들어야한다.
https://pub.dev/packages/flutter_hooks
상태가 변하면 위젯의 build 함수가 실행된다.
use시리즈는 데이터가 유지된다.
useState - 상태 저장
useEffect - 화면 빌드 후 작동해야할 것들을 작성(예를들어 화면 로딩 후 데이터 가져와야할때)
useRef - 상태관리는 필요없는데 데이터는 유지되어야 하는 것들 저장(예를들어 회원가입 할때
아디비번 입력하는데 글자 하나하나 입력할때마다 화면이 리빌드되면 앱이 느려지니까 이걸 쓰면
앱 성능을 보전할 수 있음.)
useMemoized - 상태를 가공해서 저장(잘 안씀)
useCallback - 함수를 저장(잘 안씀)

flutter_stateful_1 프로젝트에서 원래 했던 main.dart 코드 복사해 old 폴더로 이동, main 함수 주석처리
lib의 main.dart 코드 수정
build 뒤의 (BuildContext context)는 화면에 자기 위젯이 어디 위치했는지 확인가능한 경로임
화면의 최상위 context에서 read(읽어옴)
사용할때는 watch()

https://dev-yakuza.posstree.com/ko/flutter/provider/#provider%EB%9E%80
Provider는 동일한 상태(데이터)를 전역적으로 다른 위젯들과 공유할 때 사용함
위젯 트리와 상관없이 상태(데이터)를 저장할 클래스 생성, 해당 상태를 공유하는 공통 부모 위젯에
Provider를 제공, 상태를 사용하는 곳에는 Provider의 데이터를 읽어서 사용함
ㄴ 사내 메신저같은 개념임 일일히 위젯들에 필요한 데이터를 옮기면 느리기도하고 
코딩하기 귀찮고 수정하기 힘들어서 디스코드 같은걸 하나 파서 올려둔 개념임 
같은 상태를 공유하는 누구든 거기서 데이터를 받아서 쓸 수 있다.

남은거:
이벤트 - 클릭/롱클릭/드래그/슬라이드
애니메이션-useAnimation
로컬스토리지-sharedPreperence
로컬DB-sqlite,hive
통신-http,dio,getconnect
파이어베이스(push)
테스트

<어제만든 화면 UI 예제 기능 넣기>
Inkwell:화면안의 버튼이 아닌걸 버튼으로 만들어줌
Navigator로 페이지 이동

앞의 숫자들 임시변수로 저장 => 연산기호별로 계산기믹 => 새로 입력한 숫자저장  =>
=키 누르면 계산 