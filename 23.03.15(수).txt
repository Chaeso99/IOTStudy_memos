23.03.15(수)
<오전수업>
자바스크립트도 JSP와 연동하면서 신경써야한다
자바는 잘못 만든 객체가 메모리를 잡아먹는 경우가 있는데 JSP는 그렇지 않다.

MVC(모델-뷰-컨트롤러)패턴 사용자 인터페이스, 데이터 및 논리 제어를 구현하는데 널리 쓰이는 SW
디자인 패턴(스프링까지 계속 쓸거임)
View는 보여지는 화면이며, JSP/Controller는 DB(TeamMgr)/Model은 Beans
컨트롤러와 모델은 계속 사용하면서 뷰만 바꾸면 됨

teamList2.jsp 처럼 MVC패턴을 무시하고 한 파일에 모두 작성하면 에러가 발생할경우
try문 맨 앞의 내용들이(_driver~_password)클라이언트에게 갈 가능성이 있다(보안 문제)/같은 기능을
(sql 변수설정하고 사용하는 SQL문 내용들 등)다른곳에서 또 사용해야 할 경우 일일히 다시 적어야됨
직관적으로 볼수 있다 제외하고 장점이 단 하나도 없음 
!!!!이런 방식으로 프로그램 짜면 안된다!!!!

select ->스키마를 포함한 레코드 리턴
insert, update, delete ->적용된 레코드의 개수(정수) 리턴

자바 파일의 member/MemberMgr.java 참고
sql 쿼리문에서 자동증가 하는방법 두가지:하나는 null 적으면 알아서 자동증가 들어감
또 하나는 sql = "insert tblTeam(name, city, age, team) Values(?, ?, ?, ?)"; 처럼 어떤 컬럼에
값이 들어갈지 테이블명에 괄호쳐서 직접 적어주기
실무에서는 * 대신 컬럼명을 직접 적어주는게 좋다(SQL문)
실무에서 테스트를 하기 위해서는 스프링에서 사용가능한 테스트 기능 프레임워크를 써야함(JUnit 등)

폼을 디자인할때는 대부분 <table> 태그를 사용한다 테이블의 컬럼명, 빈즈, 폼의 이름은 무조건
같게 네이밍해야한다.

Proc는 화면에 보이는 페이지가 아닌 처리되는 페이지
----------------------------------------------------------------------------------------------------
<오후수업>teamRead.jsp
html 오류를 확인하려면 브라우저에서 F12를 눌러서 개발자 모드로 가야함
일반적인 프로그램은 사용자가 가공해서 뭔가 할게 없는데 웹은 url이 오픈되어 있어서 사용자가
엉뚱한 값을 넣을 수 있다.
ㄴ num값이 안넘어왔을때 대처하기

teamDelete.jsp
1. num의 요청정보를 받는다.
2. TeamMgr 객체를 useBean 태그로 만든다.
3. deleteTeam 메서드 호출 후에 teamList.jsp로 응답한다.

teamUpdate.jsp
화면에 안보이는 변수(num)값 추가하거나
<input type="hidden" name="num" value="<%=bean.getNum() %>">

화면에 보이는데 수정은 안되도록 readonly 옵션을 주면 됨
<tr>
	<td align="center">번호</td>
	<td><input name="num" 
	value="<%=num%>" readonly></td>
</tr>