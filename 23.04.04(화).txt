23.04.04(화)
책 제본하는곳 가면 책 pdf로 만들어줌 들고다니면서 폰으로 봐도 됨(정처기 공부)
기억보단 기록을 <-배민 리드개발자 블로그
집요함: 문제를 끝까지 물고 늘어지기
다같이 하는 일이니까 누구나 알아볼수 있게, 누구나 이해할수 있게 작성, 정리하기(코드, 문서 둘다)
목표를 정하면 목표만 보고 가니까 다른것들을 경험하지 못함 하루하루는 열심히 살되  다양한 경험을 기회닿는대로 일단 해보기
-------------------------------------------------------------------------------------------------
*정리하기*
<IaaS PaaS SaaS BaaS란?>
https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=doonibest&logNo=220861308003

IaaS(Infrastructur as a Service): 인프라 스트럭처
필요한 만큼 인프라를 사용하고 그 만큼의 비용을 지급하는 서비스
내가 사용하고있는 컴퓨터 대신에 서버, 스토리지 등 다양한 IT 장비를 공간차지없이 가상으로 빌려서 사용함
예시)Aws, Azure
Paas(Platform as a Service): 플랫폼
특정한 서비스를 쉽게 개발할수 있게 해주는 개발 플랫폼을 제공하는 서비스
예시)헤로쿠(heroku), google - App Engine, AWS Beanstalk
SaaS(Software as a Service): 클라우드 환경에서 도는 소프트웨어
클라우드 환경에서 동작하는 응용프로그램을 서비스 형태로 제공하는 것.
예시)웹 메일 서비스, 구글 스프레드, 드롭박스
Baas(Backend as a Service):모바일 앱 개발자를 위한 클라우드 서비스
회원관리, 회원인증 푸쉬 알림 등 백엔드 기능을 일일히 개발하지 않고 API나 플러그인 형태로 서비스. 예시)facebook-파서, aws-mBaaS, Ms-BaaS

<Firebase / supabase란?>
Firebase:구글이 소유한 모바일 애플리케이션 개발 플랫폼
분석, 인증, DB, 구성 설정, 파일 저장, 푸시 메세지 등의 기능을 대신 해주는 도구 모음
ㄴFirestore:nosql 형식의 push 방식 DB(실시간)
ㄴ클라우드 메세징(FCM):카톡 꺼놔도 카톡 하면서 알림 오는것 등 구현가능
Supabase:Firebase를 엔터프라이즈 레벨에서도 사용가능하게 만든 오픈소스 프로젝트.
RDBMS이고 pull, push 둘다 가능, 인증, 스토리지, Function 등 기능있음
ㄴ스토리지:이미지, 동영상 등 파일이 들어가는 공간 스토리지에 파일 저장하고 파일주소를 받아와서 DB에 적어둠
Firebase와 마찬가지로 클라우드로 제공되는 방식이다. / RDB인 PostgreSQL을 지원함

<pull 통신과 push 통신의 차이>
https://velog.io/@hyerin0930/%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%86%B5%EC%8B%A0-%EB%B0%A9%EC%8B%9D

pull 통신:클라이언트->서버. 클라이언트가 리소스를 서버에 요청하면 서버가 응답. 항상 새로운 요청을 보내는 쪽은 클라이언트 요청하면 데이터 보내줘
예시)페이스북 cost:검색 시간
Push 통신:클라이언트<-서버 서버가 클라이언트에게 공지사항 같은 무언가를 통지해주기 위한 방법. 데이터가 변경되면 서버 니가 알아서 보내줘 HTTP는 상태가 없어서 웹 환경에서는 동작하는데 한계가 있고, 클라이언트가 서버에 요청을 보내고 응답받으면 연결이 끊어지는 문제를 해결하기 위해 Polliing, Long-Poling, Streaming이 고안됨
예시)트위터 cost:인덱스 공간

<RDBMS와 NOSQL의 차이>
https://khj93.tistory.com/entry/Database-RDBMS%EC%99%80-NOSQL-%EC%B0%A8%EC%9D%B4%EC%A0%90

RDBMS:관계형 데이터베이스. 관계를 나타내기 위해 외래 키 사용 명확한 데이터 구조와 데이터 중복 없이 한번만 저장가능한 장점. 시스템이 커질경우 복잡해지는게 단점. 정형화된 데이터
Column과 Row. insert 위주, 금융에서 많이 사용
NoSQL:Not Only SQL. 테이블 간 관계를 정의하지 않음. 테이블은 하나의 테이블이고 테이블 간 Join도 불가능함. 유연하고 자유로운 데이터 구조, 데이터 분산의 용이성이 장점. 데이터 중복이 발생가능하며 중복된 데이터가 변경되면 수정을 모든 컬렉션에서 진행해야 하고 데이터 구조가 불명확한것이 단점. 비 정형화 데이터. json 데이터, select 위주(유저, 게시글, 댓글)
소셜에서 많이 사용 컬럼형식으로 저장하지 않고 json등 다양한 형식으로 데이터 저장가능

<서버리스(serverless)란?>
개발자가 서버를 관리할 필요 없이 애플리케이션을 빌드하고 실행할 수 있도록 하는 클라우드 네이티브 개발 모델. 
Faas(Function as a Service):서버를 관리할 필요 없이 특정 이벤트에 반응하는 함수를 등록하고 해당 이벤트가 발생하면 함수가 실행되는 구조. 예시)AWS Lambda

<온프레미스/오프프레미스의 의미>
https://www.purestorage.com/kr/knowledge/on-premises-vs-off-premises.html

온-프레미스:기업이 자체적으로 IT 인프라를 소유, 관리 및 운영하는 경우. 대부분의 경우 사내 IT팀이 시스템의 설계, 구축 및 관리를 담당함
오프-프레미스:서드파티 공급업체가 인프라, 시설 및 서비스를 제공하고 유지 관리. 조직은 애플리케이션에 적합한 리소스 조합 파악만 신경쓰면 됨

집을 소유하느냐 임대하느냐랑 비슷하다고 보면 된다.
--------------------------------------------------------------------------------------------------
[Supabase 수업]
supabase 사이트 접속, 230404Test 프로젝트 생성(비밀번호:정보처리기사)
프로젝트 들어가서 왼쪽 메뉴중에 Database 선택, 새 테이블 생성
왼쪽메뉴의 TableEditor 클릭, insert 버튼 눌러서 데이터 추가 가능
왼쪽메뉴의 ProjectSetting에서 Database 누르고 
디비버 등 DB앱 켜서 PostgreSQL 커넥팅 생성(데이터베이스 네비게이터 탭에서 우클릭-Connection) host에 supabase화면에 있는 host값 집어넣으면 됨
나머지 값들도 설정되어있는대로 하면됨 비밀번호는 아까 만든 비번이랑 같게 하기 TestConnection 눌러서 Connected 나오면 성공, 완료 누르면 됨

우리가 생각하는 실제 데이터베이스는 postgres db안의 public에 있음

<기본적인 플로우>
앱->서버->DB->서버->앱 (DB정보가 숨겨지므로 해커들이 DB건들기 어려움)
앱->supabase->앱 (상대적으로 보안에 취약함, 편리함)
ㄴ앱 개발 초기 데모버전 만들 때 많이 사용

안드로이드 스튜디오에서 새 프로젝트 생성(flutter_supabase_1, 
pubspec.yaml 파일의 dependencies 아래의 flutter와 같은 라인에 supabase_flutter: 추가
main.dart 내용 작성. 대부분의 외부 서비스들은 runApp 돌아가기 전에 초기화 해줘야함

stream으로 상태관리하는거 기억안나면 flutter_stream 프로젝트 예제 살펴보기

플러터 수업 끝났음(배운걸로 채팅앱이나 어느정도의 프로그램은 구현 가능함). 
UI 제작 및 데이터 가져오는거 연습하기
https://velog.io/@jaybon/%ED%94%8C%EB%9F%AC%ED%84%B0-%EA%B4%80%EB%A0%A8-%EC%82%AC%EC%9D%B4%ED%8A%B8-%EC%B6%94%EC%B2%9C
ㄴ플러터 관련 사이트 추천 모음
-----------------------------------------------------------------------------------------------