23.04.10(월)
JQuery를 사용하는 회사들이 많으므로 알아둬야 한다.
오전:JQuery 실습
오후:SpringBoot 수업
--------------------------------------------------------------------------------------------------
[정리해서 공부할 내용]
-JSP의 라이브러리 JSTL이란?(실습도 해보기)
JavaServer Pages Standard Tag Library. JSP에서 사용가능한 태그 라이브러리임
JSP에서 자주 사용되는 로직을 태그로 미리 정의해둔 라이브러리. 예를들어 JSTL에서 제공하는 "if" 태그를 사용하면 JSP에서 조건문 쉽게 작성가능. JSTL을 사용하면 JSP 코드의 가독성과 유지보수성을 높이고 개발시간을 단축할 수 있음.
<%=student%> 를 ${student}로 사용하는 것 등이 예시다.
라이브러리라서 사용하기전에 core를 header에 추가해주어야 한다.

-POJO란?
Plain Old Java Object. 자바의 일반적인 객체를 의미함.
JavaBean과 같은 특별한 제약이나 인터페이스를 따르지 않는 일반적인 자바 객체.
간단하고 읽기 쉽게 작성가능, 재사용성이 높고 유지보수가 용이함. 복잡한 비즈니스 로직이 아닌 데이터를 담은 객체임. 다른 프레임워크나 라이브러리와 독립적이며, 다른 컨텍스트에서도 재사용이 가능하다. 스프링에서는 POJO를 통하여 객체를 생성하고 의존성을 주입한다.

컨텍스트:어떤 것이 존재하는 환경이나 상황. 컴퓨터 분야에서는 주로 실행되는 코드가 속한 환경. 예를 들어 자바에서는 ApplicationContext, ServletContext, WebApplicationContext 등

-자바 어노테이션(Annotation)의 구성 요소
자바 어노테이션은 자바 코드에 부가적인 정보를 제공하는 메타데이터의 형태. 주석과 달리 컴파일러나 프레임워크에게 특별한 의미를 전달하는 역할을 함
구성요소 3가지:
1. Annotation의 이름:이름이 인터페이스의 형태를 가짐, 일반적으로 '@'기호 뒤에 위치한 단어로 표현됨
2. Annotation의 속성: 어노테이션은 속성을 가질 수 있으며(필수 X, 기본값 지정 가능) 속성들은 일반적으로 key-value의 형태로 표현됨
3. Annotation의 대상(Target):Annotation이 적용될 대상을 지정하는것. 적용 대상은 클래스, 필드, 메서드 등이 될 수 있음. 어노테이션의 대상은 '@' 기호 뒤에 오는 괄호 안에 선언됨.

-자바 리플렉션(Java Reflection)이란?
자바 프로그램 내에서 객체를 통해 클래스의 정보를 분석하거나, 객체를 동적으로 생성하거나, 메서드를 호출하는 등의 작업을 수행하는 API. 자바의 동적(다이나믹)프로그래밍을 가능하게 함.
리플렉션을 사용하면 다음과 같은 작업들 수행 가능
 -클래스의 생성자를 동적으로 호출
 -클래스의 필드 값을 동적으로 변경
 -클래스의 메서드를 동적으로 호출
 -클래스의 Annotation 정보를 분석
자바에서 제공하는 기능이라서 자바 언어의 모든 클래스에 대해 사용할 수 있으나 컴파일러가 제공하는 최적화 기능을 제한할 수 있어서 남용하면 안됨.

-Maven과 Gradle을 쓰는 이유와 사용법
자바 라이브러리 및 프로젝트를 관리하기 위한 빌드 도구이다.
라이브러리 의존성 관리, 빌드, 테스트, 패키징, 배포 등을 자동화하고 표준화된 프로젝트 구조를 제공해 프로젝트 관리 편의성을 높인다.
 -Maven 사용법
Maven 설치->환경변수 설정 후 설치된 디렉토리의 bin 폴더에서 실행->Maven을 사용하여 새 프로젝트 생성 'mvn archetype:generate' 명령어 사용 pom.xml 파일에 필요한 라이브러리를 추가하면 Maven이 해당 라이브러리를 자동으로 다운로드, 관리해줌
'mvn package', 'mvn install'등의 명령어를 사용해 프로젝트 빌드 가능. 빌드 결과물은 target 폴더에 생성됨.
 -Gradle 사용법
Gradle 설치->환경변수 설정 후 설치된 디렉토리의 bin 폴더에서 실행->'gradle init'명렁어로 새로운 프로젝트 생성, 옵션 선택->build.gradle 파일에 빌드 스크립트 작성->build.gradle 파일에 dependencies 블록을 추가해 필요한 라이브러리 지정, 자동 다운로드->'gradle build'명렁어를 사용해 프로젝트 빌드->'gradle run' 명령어를 실행해 빌드된 프로젝트 실행

Gradle은 Maven과 비교하여 좀 더 유연하고 빌드 스크립트가 간결하며, 높은 성능과 병렬 빌드 기능을 제공합니다. 또한, Gradle은 Groovy 기반으로 작성되어 있으므로, Java에 익숙하다면 쉽게 배울 수 있습니다.

-IoC, DI, AOP
SW 개발에서 사용되는 패러다임이나 기술. 코드의 유연성과 확장성, 재사용성과 유지보수성 등을 향상시킴
1. Inversion of Control:객체 생성 및 관리를 개발자가 아닌 프레임워크가 수행하도록 하는 개념. 개발자는 비즈니스 로직에만 집중하고 객체 생성, 객체간 관계 구성, 라이프 사이클 관리 등을 개발자가 아닌 프레임워크가 처리하도록 만듬. 예시:Spring 프레임워크
2. Dependency Injection:IoC를 구현하는 방법 중 하나. 객체 간의 의존 관계를 외부에서 주입하여 객체 간의 결합도를 낮추고, 유연하고 확장가능한 애플리케이션을 만듬.Setter Injecetion, Constructor Injection, Field Injection 등의 방법으로 구현 가능
3. Aspect-Oriented Programmin:횡단 관심사(Cross-Cutting Concerns)를 분리하여 모듈화하는 프로그래밍 기법. 횡단 관심사란 어플 전체에 걸쳐 발생하는 로깅, 보안, 트랜잭션 관리 등의 공통된 관심사임.(이런 공통된 관심사를 모듈화해서 재사용성, 유지보수성 높임) 예시:SPring 프레임워크의 AOP 모듈

-서블릿 컨테이너와 서블릿
서블릿(Servlet):자바 웹 어플리케이션에서 동적인 웹 페이지를 생성하거나, 클라이언트의 요청을 처리하기 위한 자바 클래스
서블릿 컨테이너(Servlet Container):서블릿의 생명주기를 관리하고, 클라이언트의 요청을 받아 서블릿 객체를 생성하여 요청을 처리하는 역할. doGet(), doPost()등을 호출하여 클라이언트의 요청을 처리하고, 요청에 대한 응답을 생성하여 반환함. 또한 WAR파일 배포, JNDI, JMX 등의 기능을 제공함 대표적인 예시:Apache Tomcat, Jetty, JBoss

-스프링 컨테이너와 빈(Bean)
스프링 컨테이너:스프링 프레임워크의 핵심 컴포넌트. 스프링 애플리케이션에서 객체의 생성과 관리를 담당. Bean을 생성하기 위해 XML, Annotation, Java Configuration 등의 방법을 제공함
Bean을 생성, 관리하는 동안 다양한 작업을 수행하는데 그중에서 가장 중요한 작업은 의존성 주입(DI). 스프링 컨테이너의 Bean 생성, 관리, 의존성 주입 등의 작업을 통해 스프링은 느슨한 결합, 인터페이스를 이용한 추상화를 실현하여 유지 보수성이 높은 애플리케이션을 개발가능하게 한다.

Bean:스프링 컨테이너가 생성, 관리하는 다양한 종류의 객체 중 가장 중요한 객체. 스프링 컨테이너에서 생성되고, 관리되는 객체를 의미함. 일반적으로 자바 클래스를 기반으로 하며, 스프링 컨테이너에 등록되어 있어야 사용가능
--------------------------------------------------------------------------------------------------
[실습]TCPSCHOOL 사이트
http://www.tcpschool.com/jquery/jq_intro_basic

-JQuery(자바스크립트 언어를 간편하게 사용할 수 있도록 단순화시킨 오픈소스 기반의 자바스크립트 라이브러리)HTML, CSS, 자바스크립트를 알아야 배울 수 있음.
참고영상:https://www.youtube.com/watch?v=Ko7wP7pohso
CDN(Content Delivery Network):웹 사이트 접속자가 서버에서 콘텐츠를 다운받아야 할 때, 자동으로 가장 가까운 서버에서 다운받도록 하는 기술.제이쿼리를 사용하기 위해 파일을 다운받는 대신 이 방법을 사용해 로드, 사용할 수 있음.
제이쿼리 기본 문법:$(선택자).동작함수();

-Ajax
Asynchronous JavaScript and XML
HTML, CSS, 자바스크립트, DOM, XML 등 기존에 사용되던 여러 기술을 함께 사용하는 새로운 개발 기법. 웹 페이지 전체를 다시 로딩하지 않고도, 웹 페이지의 일부분만을 갱신할 수 있게 해줌
Ajax 프레임워크:Ajax를 이용하여 개발을 손쉽게 할 수 있도록 미리 여러가지 기능을 포함해 놓은 개발 환경. 다음 Ajax 프레임워크들을 가장 많이 사용
-Prototype
-script.aculo.us
-dojo
-jQuery

DOM(Document Object Model):문서 객체 모델. HTML 문서나 XML 문서에 접근하기 위한 일종의 인터페이스. 문서 내의 모든 요소의 목적과 특징을 정의하고, 각각의 요소에 접근하는 방법을 제공함
node:DOM은 노드라고 불리는 계층적 단위에 정보를 저장하고 있음
node tree:문서의 정보가 저장되는 계층적 구조. 노드 트리의 모든 노드들은 서로 계층적 관계를 가지고 있음.

XMLHttpRequest 객체
:Ajax의 가장 핵심적인 구성 요소. 웹 브라우저가 서버와 데이터를 교환할 때 사용되며, 웹 브라우저가 백그라운드에서 계속해서 서버와 통신할 수 있는 것은 이 객체를 사용하기 때문
현재 대부분의 주요 웹 브라우저는 이 객체를 내장하고 있음.
-------------------------------------------------------------------------------------------------
[수업]인텔리제이 IDEA 실행(인텔리제이는 안드로이드 스튜디오랑 거의 비슷, 같은 방식으로 사용하면 됨)
Plugins ->Korean Language Pack/Translation 다운로드->IDE 재시작(메뉴들 한국어로 나옴)
파일->설정->시작 검색해서 시작 시 프로젝트 다시 열기 체크 해제, 휠 검색해서 Ctrl+마우스 휠로 다음 위치의 글꼴 크기 변경 체크

<유용한 단축키 몇가지>
(개발할때는 마우스를 최대한 안쓰는게 손목을 지키는것)
Ctrl 좌우방향키:글자 단위로 이동
Ctrl Shift 좌우방향키 또는 컨트롤 w:글자 영역 지정(드래그 한거랑 같음)
Page Up, Page Down:화면을 위아래로 이동
Home, End:라인의 맨앞, 맨뒤로 이동
Alt 1:프로젝트 칸으로 이동
Esc:다시 에디터로 이동
Alt Insert:지정된 경로에 새로 만들기
Alt 방향키:켜놓은 다른 파일로 이동
Ctrl F4:지금 보고있는 파일 끄기
Ctrl Shift 위아래방향키:한줄씩 이동
Ctrl D:한줄복사
Ctrl X:잘라내기(지울때 이걸로 지워도됨)
Ctrl Z:실행취소
Ctrl Shift Z:다시 실행

#lombok (안쓰는 회사 없다고 보면 됨)
윈도우 검색창에 실행 검색해서 실행 프로그램 켜고 거기에
file://Desktop-etu2sob/공유	검색해서 열기=>jsp-project-todo 압축풀기(이클립스로 실행)
ㄴ기존 프로젝트 안에 넣으면 안됨, 새 프로젝트로 열어야됨
이클립스 마켓플레이스에서 Eclipse Enterprise Java and Web Developer Tools 설치

롬복은 JAR 파일로 보관되어있어도 따로 설치해줘야 함(관리자 권한으로 명령 프롬프트 등을 통해서 열면 됨) 

C:\WINDOWS\system32>cd C:\Jsp\myapp\jsp-project-todo\src\main\webapp\WEB-INF\lib
C:\Jsp\myapp\jsp-project-todo\src\main\webapp\WEB-INF\lib>java -jar lombok-1.18.26.jar입력 - Specify Location 눌러서 이클립스 설치경로 찾아주면됨(exe파일)
Install/Update 누르고 Install Succesful 나오면 성공(Quit 눌러서 나가기)=>이클립스 재시작

Windows-Show view-Other 들어가서 Server 검색해서 Servers 화면 열기=>연결된 서버가 없는 경우 Create a new server 버튼 눌러서 Apache 폴더의 Tomcat 서버 골라서 추가시키고 우클릭해서 Add and remove 선택, 오른쪽으로 이동시키고 서버켜기(Start 버튼)

크롬 켜서 주소창에 localhost/todoList <-포트번호가 80인경우만 가능 
또는 localhost:포트번호/todoList 치면 됨

프로젝트 폴더 및 파일 보관 구조 잘 익혀두기
jsp폴더 등은 WEB-INF 안에 보관해야 외부 사람들이 코드를 볼 수 없음!!!!

H2 데이터베이스:테스트용으로 자주 사용함

화면과 연관이 있는것:DTO파일
DB와 똑같이 되어있는것:Entity파일

화면 여러개 쓰는방법(꿀팁)!!!!!!!!!!
윈도우 상태표시줄에서 검색버튼 오른쪽의 작업 보기 눌러서 새 데스크톱 만들고
컨트롤 윈도우키 방향키 눌러서 왔다갔다 가능함

Common 폴더의 ResDTO.java
모든 형식의 DTO를 받을 수 있는 DTO 파일. 예를들어 TodoDTO를 넣으면 T 자리에 TodoDTO가 들어간다. 
code는 예를들면 Id가 틀렸으면 1번 비번이 틀렸으면 2번..식으로 우리가 정의해서 사용하는것 에러처리를 위함
message는 프론트엔드에서 뭔가 실수했거나 했을때 가이드 해줄수있는 메세지("비밀번호를 잘못 입력했습니다.")등. alert, modal창 등 띄워서 message만 뿌려주면 간단함
data는 우리가 실제로 값을 받고싶은 데이터

구체적인 코드는 검색등으로 기존걸 받아와서 쓰면 된다.
코드들의 배치 구조를 잘 설계해야함

taglib prefix = "c" prefix의 값은 아무거나 입력해도됨 uri에 들어간 라이브러리를 쓰겠다는뜻
fetch 안에 버전을 나누는 이유:만든 앱의 데이터를 올릴때 변경이 많이 된 경우 옛날 버전을 배포

개발자 명언- 바퀴를 재발명하지 마라(원래 만들어진거 복붙해서 수정해라)
한번 만든 코드는 수정하지 마라. 새 함수를 만들어서 쓰셈(원래거가 잘돌아가는데 기능이나 매개변수를 추가해야 할 경우)

<JSP 배울때의 메소드>
service - > 메소드가 get? post? 판별
doGet - 데이터를 가져올때
doPost - Insert
doPut - Update
doDelete - 삭제
등등 다양한 종류가 있다.

Service - 우리가 회사가서 만들게 될 대표적인 클래스. 비즈니스 로직을 만드는것
(게시글쓰고 은행에 송금하고 등등...)

private final 붙여서 service를 매개변수로 받아 넣는것 기억하기

지금 이 코드들 로직 그대로 스프링으로 만들것임
FrontController.java <-이 프로젝트에서 단 하나있는 Servlet
FrontController가 모든 요청을 받아들여서 여기저기 분배해주는 디자인 방식임

리모콘은 인터페이스의 가장 좋은 예시이다.
1번을 누를때는 삼성리모콘이든 엘지리모콘이든 1번으로 가야됨