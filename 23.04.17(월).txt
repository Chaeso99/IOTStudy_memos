23.04.17(월)
10시정처기10시정처기10시정처기10시정처기
[스프링 수업]
인텔리제이 쓰면 translation/korean 플러그인 설치
vs코드 쓰면 단톡방에 있는 사진안의 확장프로그램 모두 설치

<스프링pre1.pptx 설명>
-전 세계 대부분은 웹서버류 프로그램을 사용. 우리는 아파치 톰캣(웹 애플리케이션 서버) 쓸거임
아파치 등의 오픈소스 코드보다 폐쇄적인 알집, 알약 등이 보안성이 더 나쁘다. 보안 및 유지보수 측면에서 오픈소스가 더 좋음
-아파치는 웹서버라서 정적 파일(HTML, CSS, JS), 정적 리소스(저장된 이미지, 동영상 등)만 사용가능
-아파치 톰캣은 웹 애플리케이션 서버라서 동적 파일(JSP, 서블릿 등) 사용가능
자바 객체 - 대상을 추상화 한 자바 코드
JSON - 대상을 추상화 한 문자열 데이터

직렬화(Serialize)
-객체를 데이터 스트림으로 만드는 것
-객체에 저장된 데이터를 스트림에 쓰기 위해 연속적인 데이터로 변환하는 것

역직렬화(Deserialization)
-스트림을 객체로 만드는 것


직렬화와 역직렬화를 하는 이유:다른 기종 간의 데이터 송수신
java객체 -> python객체
(호환이 되지 않아서 에러 발생)
java객체 -> 직렬화 -> json -> 역직렬화 -> python객체

우리가 플러터할때 라이브러리 추가하면 pubspec.yml에 추가, pub get한거처럼
스프링에서는 build.gradle의 dependencies에 추가해야함!!!!!! 추가하고나면 프로젝트 다시 로드 클릭하거나 인텔리제이 오른쪽 위에 뜨는 버튼 클릭(코끼리모양)

<bean 프로젝트>
파일들에 new 생성자 써서 객체 만드는 코드는 하나도 없음 스프링이 알아서 객체를 만들어서 쓰는거임 = 제어의 역전(IoC - 프레임워크가 컨트롤한다.)
ㄴ여러번 생성할 필요가 없는 객체는 스프링이 싱글톤처럼 관리한다.!!!!!!!
여러번 생성할 필요가 있는 객체는 new해서 만들수도 있음.
IoC, DI 개념 확실하게 알아야함.(회사에서 가장 많이쓰는게 jsp, spring)

생성할 객체 클래스 위에
@Bean - 외부 라이브러리 객체
@Component - 내가 만든 객체. 어노테이션을 붙이면 Spring IoC 컨테이너가 자동으로 해당 객체를 생성한다. 그리고 해당 객체를 필요로 하는 다른 객체에 주입시켜준다.(DI)
@Configuration - 설정
@Controller - 주소 매핑
@Service - 비지니스 로직
@Repository - DB, 데이터 소스
중에 하나는 무조건 들어가야 스프링이 객체를 생성한다.

순환 참조(자기자신을 호출)에 의존하면 안된다. 서로서로 의존하면 안됨, 자기자신을 의존하면 안됨
우리가 직접만든 클래스는 @Component
우리가 직접 안만든 객체는 @Bean 으로 사용
@ComponentScan이 붙어있으면 해당 클래스 밑의 모든 @Bean과 @Component를 스캔해서 객체를 생성한다.	

IoC 컨테이너가 DI를 시켜주는것임
@Autowired - 타입으로 주입 (없으면 이름으로)
@Inject - 타입으로 주입 (없으면 이름으로)
@Resource - 이름으로 주입 (없으면 타입으로)
ㄴDI 주입은 거의 @Autowired를 사용하거나 private final 타입 변수명; 하고 생성자로 받아오는 방식임(둘중 하나 사용, 둘이 차이 없음) @Autowired 사용할때는 final없이 private만 하고 위에 오토와이어드를 붙여야한다. - 보통 Atuowired보다 private final 방식을 더 많이 사용함
private ->객체가 생성되고나서 setter로 수정가능.
private final ->객체가 생성되고나서 수정불가능 ->스프링에게 객체 생성시 강제로 주입하라고 시키는 것

@Autowired는 setter/생성자/필드 모두에 붙일 수 있다.

스프링 IoC 컨테이너가 관리하는중인데 ComponentScan으로 Bean, Component를 찾아서 객체를 생성함 
생성한 객체를 필요한 곳에 알아서 넣어준다 라는 개념이 DI임

우리가 로봇을 만들건데 로봇이 팔이랑 다리가 필요함. 로봇 객체를 만들때 로봇은 팔, 다리에 의존하고 있음(저 두 부품이 없으면 로봇을 못만든다.)
팔, 다리는 로봇의 디펜던시임

new Robot(팔, 다리); -> 디펜던시 인젝션(의존성 주입)
ditest 폴더가 우리가 직접 만드는 방식의 DI인데 Spring으로 치면 팔, 다리, 로봇에 전부 @Component가 붙어있어서 스프링이 팔, 다리를 직접 만듬=>로봇을 만들건데 팔, 다리를 무조건 받아야하네? 이미 만들어진 팔, 다리를 가져옴

우리가 친구한테 커피사오라고 했는데 한시간째 안오고있음.. 커피를 만들어서 오나??
우리가 커피숍에 감 직원한테 커피를 시킴 - 상식적으로 생각했을때 커피숍이랑 직원이랑 커피랑 매번 new가 되어야하는건? 커피임 커피숍이랑 직원은 원래 있던 객체들이 일하면됨
ㄴ그런 의미에서 우리가 만든 프로그램의 로봇 메모리 주소도 항상 같음(새로운 로봇이 생기는게 아니라 같은 로봇이 그냥 계속 있는것)

커피숍으로 치면
@Component -> 직원
@ComponentScan -> 직원이 출근한것
@Autowired -> 고객이 요청할 때 / 다른 직원이 요청할 때
@Controller -> 계산대

new -> 클라이언트가 요청할때마다 new를 하면 비용적으로 매우 손실이 크다!! @Component, @ComponentScan으로 미리 모두 다 준비해놓고, 필요하면 준비된 객체를 제공한다.

Spring IoC 컨테이너에서 우리가 @Component를 붙인 Leg, Arm, Robot에서 앞의 둘은 이미 뜨는데 로봇을 만들려니까 Leg, Arm이 필요함=>팔다리를 새로 만드는게 아니라 컨테이너에서 찾아보고 이미 있는 leg, arm을 갖다가 로봇을 만듬 tempcontroller에서도 새로 로봇을 만들어 쓰지 않고 이미 만들어져있는 로봇을 가져와서 사용함. 로봇말고 AI를 만들거임 근데 AI도 leg랑 arm이 필요하면? 새로 안만들고 원래 있던 애들을 가져다 쓰면 비용적으로 절약되어서 좋다~
로그인이랑 회원가입을 해야하는데 user테이블을 쓸거임 DB를 하나 만들었을때 user 테이블의 DB를 하나만 만들어서 로그인, 회원가입에 둘 다 쓰면 객체를 새로 안만들어도 되서 빠르게 사용가능함  <=랑 같은방식이 스프링에서 작동

IoC랑 DI만 이해하면 Spring 반은 배운거임 대신 이 둘은 꼭 알아야됨 모르면 그냥 스프링 모르는거다.. 꼭 알아야됨!!!!
IoC ->개발자가 하던 객체생성, 관리를 스프링이 알아서 알잘딱 하는거
DI ->

내일 할것:jsp -> jstl 방식
자바스크립트 + RestController = (비동기 통신)
h2 메모리 데이터베이스로 TODO LIST 만들기
----------------------------------------------------------------------------------------------
<프로젝트의 멤버생일 부분>
form에 담아서 하거나 셋다 document.getbyid 해서 하기 - js에서 출력 안되는 상태

페이지 이동->jsp
나머지 (insert, update, delete) ->전부 비동기 통신 사용fetch.then(결과, 페이지이동 또는
메세지 알람)

문제가 생기면 새로운 프로젝트를 만들어서 해보는게 편할수 있음