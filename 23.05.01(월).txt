23.05.01(월)
대략 5월9일까지 수업함, 이후에는 최종 프로젝트 진입(상세일정은 추후에)
수업하는 내용은 최소치만 수업하는거라서 실무가면 새로운것들을 많이 배워야한다.

[my 프로젝트 했던거 복습/진도]
<오늘 할 것>
- Response
- 포스트맨으로 인터페이스 확인
- 인터페이스 바꿔보기
- 비동기 통신 + 새로고침
- 비동기 통신 + 새로고침 X

<복습>
우리가 처음 프로젝트를 파면 세팅해야할것 - build.gradle : 롬복, 데브툴스 등이 있으면 편리하다. 롬복은 컴파일할때만 필요하기때문에 compileOnly가 붙는다. annotationProcessor도 붙음 compileOnly, runtimeOnly는 둘이 상반된 개념이다.
ㄴJSP가 Springboot에서 공식적으로 사용되지 않기때문에 dependencies에 	implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
implementation 'javax.servlet:jstl' 추가해서 사용

application.yml 파일:우리가 프로젝트를 실행하면 컴포넌트, 빈 스캔하기 전에 작동됨. 가장 기초적인 설정 파일이라고 생각하면 된다. 이 내용을 설정해놓고 빈 등으로 새로운 내용을 설정하면 덮어쓰기 된다. (이 파일의 내용이 적용되지 않음)
sever: port: 6060(디폴트는 8080임)
spring :mvc :view :prefix:, suffix: .jsp, 타임리프(Thymeleaf) 등이 올 수 있음. 경로를 설정하는 부분이라고 보면 됨
src 폴더 밑에는 java폴더, resources 폴더, jsp를 위한 webapp 폴더가 있음. application.yml에는 webapp을 안적는다 그 아래 경로부터 적으면 됨 datasource: 는 DB를 연결하기 위한 설정부분이다. url, driver-class-name, username, password의 4가지 옵션을 주로 설정함.
h2는 메모리 데이터베이스다. 프로그램을 종료하면 메모리의 데이터가 다 날라간다. 테스트 용으로 적합함
sql:init: 옵션을 이용해서 데이터를 간편하게 설정 가능함(이게 없으면 우리가 서버를 켤때마다 일일히 데이터를 넣어야됨)
mybatis:마이바티스 라이브러리를 추가하면 자동완성 된다. mapper-location에서 mapper는 자바코드랑 데이터베이스를 연결해주는 역할을 한다.

MyApplication.java 프레임워크라서 우리가 main에서 실행하는게 아니라 springboot에게 작동을 맡긴다. @ComponentScan 잘 기억하기. 컨트롤러는 서비스에 의존적이라서 컨트롤러안에 서비스를 넣어주기 위해서 DIf를 사용한다. 컨트롤러- 카운터 직원 /서비스-커피타주는 직원
유저가 요청 - 컨트롤러 - 서비스 - 컨트롤러 - 유저
더미데이터를 저장하는 용도로 DTO를 만들어두는것이 편하다.

todo_mapper.xml 우리가 쓰던 JDBC와 같은 역할pstmt, connection 등등... 대신 이거 사용

<오늘진도>
화면을 리턴하면 todoservice로 들어가고, 데이터를 리턴하면 api로 들어가도록 만들거임
클래스 단위에서는 @Transactional을  readOnly로 만들고, 각 insert, update, delete에서 @Transactional 을 그냥 붙여서 수정
경로:localhost:6060/api/v1/todo 지금까지 한게 REST API 통신 방식임

통신 테스트용 프로그램 postman을 쓰는 이유(많은 회사에서 사용함)
브라우저 검색창은 GET 요청만 가능하다.
브라우저에서는 json데이터를 넘기기 어렵다.
postman에서는 다양한 메소드를 사용 가능하다.(get, post, put, delete 등등)
json데이터를 넘기기 쉽다.
다양한 통신 테스트를 하기 좋다.
인터페이스:(예시:리모콘)우리가 어떤 동작을 하면 어떤 기능이 되도록 약속되어있는것
post로 항목 추가해보기 -> put으로 doneYn 변경해보기 -> delete로 추가한 항목 삭제해보기(확인은 get으로)

요즘 회사에서 템플릿 방식이 아닌 클라이언트가 따로 있을 경우는 무조건 REST API 방식을 사용함

API V1/V2 버전 진행함
postman에서 post할때 등 주소창에 한글을 칠경우 다 치고 방향키 한번 누르고 해야 정상적으로 들어감. 안누르면 빈값들어감

URL 인코딩 : 주소창에 보일때는 한글이다가 복붙하면 %영어숫자 글자로 바뀌는것(이쪽이 정상, 한글은 브라우저가 해석해서 보여주는거임) - 한글을 못받는 시스템이나 프로그램의 경우 인코딩, 디코딩하는 API를 사용해야 한다.

<REST API 정리>
https://devuna.tistory.com/79
https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html
중요한 항목
1. URI는 정보의 자원을 표현해야 한다.
2. 자원에 대한 행위는 HTTP Method(GET, POST, PUT, DELETE)로 표현한다.
소문자를 사용한다/언더바 대신 하이픈을 사용한다(가급적 하이픈의 사용도 최소화)/마지막에 슬래시를 포함하지 않는다./행위는 포함하지 않는다(행위는 url대신 method를 사용해서 전달)/파일확장자는 uri에 포함시키지 않는다./가급적 전달하고자 하는 자원의 명사를 사용하되, 컨트롤 자원을 의미하는 경우 예외적으로 동사를 허용한다.

<수업진도>
get-> 데이터 dto로 주기
post-> 데이터 json 받기

TodoDTO에 주석처리한 부분대로 하면 결과값의 타입이 헷갈리니까 무조건 단일값으로 넘기도록 만들기

유저가 봐야하는 데이터만 받아서 리턴해가지고 화면에 보여주면 됨

태초의 근본은 TodoEntity.java 이게없으면 우리 서버가 돌아갈수없음
여기서 값을 뽑아오는 녀석이 TodoRepository.java
리포지토리를 필요로하는곳이 Service. 서비스에서 리포지토리를 불러서 List<TodoEntity>호출
리턴할때 엔티티를 리턴하려고 보니 필요없는 데이터가 있음 유저가 필요로하는 데이터만 리턴하고싶음(나머지를 넘겨주면 데이터 낭비) - 유저가 필요로하는 데이터만 넘겨주는게 DTO
DTO 파일으로 가보면 필요한 녀석들만 반환하면 되고 맨아래의 팩토리 메소드에서 Todo로 바꿔서 리턴함(map 이용, TodoEntity타입 List에서 Todo타입 List로 바뀜)