<관계형 데이터베이스란 rdbms>
Relational Data Base Management System
데이터가 하나 이상의 열과 행의 테이블에 저장되어 서로 어떻게 관련되어 있는지 쉽게
파악하고 이해 가능한 데이터 구성 정보 모음. 테이블간의 상호작용을 기반으로 여러 테이블이
논리적으로 연결됨(예를들어 CUSTOMER 테이블과 ORDER 테이블이 있으면 CustomerID라는
key를 통해서 두 테이블이 연결)

예시로는 MySQL, MariaDB, OracleDB 등이 있음

관계형 데이터베이스의 장점:유연성, 사용 편의성, 공동 작업, 내장된 보안 기능, DB정규화
,ACID 규정 준수

<데이터베이스 엔티티란 entity>
데이터 모델링에서 사용되는 객체. 업무에 필요하고 유용한 정보를 저장 및 관리하기 위한
어떤 것

엔티티:데이터베이스 테이블
인스턴스:데이터베이스에 저장된 데이터 내용의 전체 집합(한 행)
속성(Attribute):인스턴스의 구성요소로서 더이상 분리안되는 단위

적절한 엔티티의 조건:
업무에서 필요로 하는 정보여야 하고, 
유일한 식별자가 있어야 하고, 
두개 이상의 인스턴스의 집합이여야 하고, 
업무 프로세스에 의해 사용되어야 하고, 
반드시속성을 포함해야 하고, 
다른 엔티티 간의 관계가 존재해야 한다.

<데이터베이스 속성이란 Attribute>
데이터베이스를 구성하는 가장 논리적 단위, 개체의 특성을 기술함
예를들어 학생 릴레이션에서 학번, 이름, 학년, 학과 등이 속성임
속성의 수를 Degree 또는 차수 라고 부름
각 속성이 가질 수 있는 값의 범위를 도메인(Domain)이라고 함

<데이터베이스 식별자란 Identifier>
하나의 엔티티에 구성된 여러 속성 중에 엔티티를 대표할 수 있는 속성
하나의 엔티티는 반드시 하나의 식별자가 존재해야 함

<데이터베이스 관계란 relationship>https://mozi.tistory.com/204
엔티티의 인스턴스 사이의 논리적인 연관성.
존재의 형태나 행위로서 서로에게 연관성이 부여된 상태
(학생 엔티티의 인스턴스는 학부 엔티티의 인스턴스에 포함되어 있을것이므로
이러한 경우는 존재에 의한 관계 라고 함)
(학생 엔티티와 수업 엔티티가 있을때 각 엔티티의 인스턴스끼리 관계가 발생하기 위해 수강
등의 특정 행위가 발생해야 하므로 이런 관계를 행위에 의한 관계 라고 함)

<데이터베이스 제약조건>
데이터의 무결성을 지키기위해 입력받은 데이터에 대해 제한을 두는 것
NOT NULL:해당 필드는 NULL값을 저장할 수 없음
UNIQUE:중복된 값을 저장할 수 없음
PRIMARY KEY:기본키를 지정. 해당 필드는 NOT NULL과 UNIQUE가 모두 적용됨
FOREIGN KEY:한 테이블을 다른 테이블과 연결하여 외래키 지정. 해당 테이블은
다른 테이블에 의존됨
DEFAULT:해당 필드의 디폴트값 설정

<데이터베이스 무결성>https://cocoon1787.tistory.com/778
Data Integrity
데이터의 정확성(중복 및 누락 X), 일관성, 유효성이 유지되는 것

1. 개체 무결성(기본 키 제약):기본키(PK)에는 Null값 못오고, 기본키는 테이블 내에 오직 하나의
값만 존재해야함
2. 참조 무결성(외래 키 제약):외래키의 값은 NULL이거나 참조 릴레이션의 기본 키값과 같아야함
,외래 키 속성은 참조불가능한 값을 지닐 수 없음.
3. 도메인 무결성:필드의 타입, Null값 허용등에 대한 사항을 정의, 올바른 데이터가 입력되었는지
확인하는 조건. ex) 주민등록번호 필드에 문자가 입력되면 안됨
Null 무결성, 고유(Unique) 무결성, 키 무결성(하나의 테이블에는 적어도 하나의 키 존재 

<데이터베이스 인덱스(index)> https://mangkyu.tistory.com/96
책의 목차(색인)같은 개념. 데이터베이스 테이블의 검색 속도를 향상시키기 위한 자료구조
SELECT 외에도 UPDATE나 DELETE 등의 성능이 함께 향상됨(해당 연산을 수행하려면
해당 대상을 조회해야 작업이 가능하므로)
인덱스 사용 만큼이나 생성된 인덱스를 관리해주는것도 중요하므로 사용하지 않는 인덱스는
바로바로 제거해야함!

-인덱스 관리
INSERT:새로운 데이터에 대한 인덱스 추가
DELETE:삭제하는 데이터의 인덱스 사용하지 않음 처리
UPDATE:기존의 인덱스를 사용하지 않음 처리, 갱신된 데이터에 대해 인덱스 추가

-인덱스 장점:테이블 조회 속도 및 성능향상, 전반적 시스템의 부하 줄임
-인덱스 단점:인덱스 관리를 위해 DB의 약10%에 해당하는 저장공간 필요, 추가 작업 필요,
잘못 사용하면 성능이 저하되는 역효과 발생

-인덱스를 사용하면 좋은 경우
1. 규모가 작지 않은 테이블
2. INSERT, UPDATE, DELETE 가 자주 발생하지 않는 컬럼
3. JOIN이나 WHERE 또는 ORDER BY에 자주 사용되는 컬럼
4. 데이터의 중복도가 낮은 컬럼

-인덱스의 자료구조:인덱스는 여러 자료구조를 이용해서 구현가능, 대표적으로
해시 테이블과 B+Tree가 있음

<데이터베이스 풀스캔과 인덱스스캔>
Full Table Scan:테이블에 존재하는 모든 데이터를 읽어 조건에 맞으면 결과로 추출, 조건에
안맞으면 버리는 형식. 적용가능한 인덱스가 없는 경우, 넓은 범위의 데이터 엑세스, 병렬처리 엑세스, FULL 힌트를
적용한 경우 등에 수행함

Index Scan:인덱스를 구성하는 칼럼의 값을 기반으로 데이터를 추출
인덱스의 구성 칼럼이 A+B라면 먼저 칼럼 A로 정렬되고 칼럼A의 값이 같으면 칼럼B로 정렬
(B까지 같으면 레코드 식별자로 정렬)-결과가 정렬되어 반환됨

대용량 데이터 중에서 극히 일부의 데이터 찾을때는 인덱스 스캔 방식이 유리
테이블의 대부분 데이터를 찾을땐 풀 테이블 스캔 방식이 유리
-----------------------------------------------------------------------------------------------------
<데이터베이스 프로시저와 함수>
Procedure:어떤 업무를 수행하기 위한 절차, 프로세스를 절차적으로 기술해 놓은 것
ex)[Procedure Start]
1.쇼핑몰 회원 로그인/2.구매할 신발 선택/3.개인정보 및 배송지 선택/4.결제
[Procedure End]
특정 작업을 수행/리턴값을 가질수도 안가질수도 있음/리턴값 여러개 가질수있음/서버(DB)에서
기술/수식내에서 사용불가/단독으로 문장 구성 가능

Function:프로시저의 각 프로세스를 수행하기 위해 필요한 기능
특정 계산을 수행/리턴값 반드시 필요/리턴값 하나만 가짐/화면(Client에서 기술)/수식내에서만
사용가능/단독으로 문장 구성 불가

함수나 프로시저나 구조적으로는 동일하며 프로시저도 리턴값을 가질 수 있음


<데이터베이스 트리거>
테이블에 대한 이벤트에 반응해 자동으로 실행되는 작업.
특정 테이블에 INSERT, DELETE, UPDATE 같은 DML문이 수행되었을 때 데이터베이스에서 자동
으로 동작(호출)되도록 작성된 프로그램

행 트리거:테이블 안의 영향을 받은 행 각각에 대해 실행된다. 변경 전 또는 변경 후의 행은
OLD, NEW 라는 가상 줄 변수를 사용하여 읽을 수 있다.
문장 트리거:INSERT, UPDATE, DELETE 문에 대해 한 번만 실행된다.

<데이터베이스 정규화>https://mangkyu.tistory.com/110
Normalization. 
관계형 데이터베이스의 설계에서 중복을 최소화하게 데이터를 구조화하는 프로세스
테이블 간에 중복된 데이터를 비허용함
제1정규화,제2정규화,제3정규화,BCNF,제4정규화,제5정규화

<데이터베이스 반정규화>
De-Normalization.
데이터베이스의 성능 향상을 위해서 데이터 중복을 허용하고 조인을 줄이는 방법
SELET 속도를 향상시키지만 데이터 모델의 유연성이 낮아짐.

작업 속도가 느린 경우, 다량의 범위를 자주 처리해야하는 경우, 특정 범위의 데이터만 자주
처리하는 경우, 요약 및 집계 정보가 자주 요구되는 경우 사용한다.


<DCL>
Data Control Language:데이터 제어어
데이터베이스에 접근하고 객체들을 사용하도록 권한을 주고, 회수하는 명령어들
GRANT, REVOKE 등

<DDL>
Data Definition Language:데이터 정의어
테이블과 같은 데이터 구조를 정의하는데 사용되는 명령어들(생성, 변경, 삭제, 이름변경)
CREATE, ALTER, DROP, RENAME, TRUNCATE 등

<DML>
Data Manipulation Language:데이터 조작어
SELECT, INSERT, UPDATE, DELETE 등
데이터베이스에 들어있는 데이터를 조회, 검색, 변형하는 명령어