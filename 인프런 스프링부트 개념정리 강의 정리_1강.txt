인프런 스프링부트 개념정리(이론)_1강, 2강, 3강

스프링은 프레임워크다.(프레임워크 = 틀)
스프링은 오픈소스다.(내부를 뜯어고칠수 있다)
스프링은 IoC컨테이너를 가진다.(Inversion of Controll)제어의 역전 - 주도권이 스프링에게 있다. class ->설계도	object->실체화가 가능한 것       Instance->실체화 된 것
누누{ //오브젝트		캐릭터{//클래스
변수1(게임속에 존재가능)	추상적인 의미		
변수2			(게임속에 존재 못함)
}			}

가구 - 추상적인 개념 
의자, 침대- object로 존재하다가 이 세상에 실제로 튀어나온 순간 Instance가 됨
개발자가 오브젝트를 직접 new 키워드를 통해서 heap 메모리 공간에 올리는것이 아니라 
 public void make(){		public void use(){
의자 s = new 의자();		 //옆의 메소드에서 만든 의자를 쓰고싶음
}			}

스프링이 여러가지 오브젝트들을 스캔해서 자기가 이 객체들을 heap메모리에 직접 띄운다.

스프링은 DI를 지원한다(의존성 주입):스프링이 관리하는 객체를 내가 원하는 모든 곳(메소드 등)에서 가져와서 사용가능 객체는 단 한번만 생성되어 같은 객체를 여러 곳에서 사용(싱글톤)

스프링은 엄청나게 많은 필터를 가지고 있다. (필터 = 검열의 기능 수행, 문지기라고 생각하면 편함) A나라성-톰캣 / 왕의집-스프링 컨테이너
톰캣이 들고있는 필터는 filter라고 부르고 web.xml이라는 파일
스프링이 들고있는 필터는 인터셉터 라고 부름(AOP라는 개념)

스프링은 엄청나게 많은 어노테이션을 가지고 있다.(리플렉션, 컴파일체킹)
어노테이션:컴파일러가 뭔가를 체킹할 수 있게 힌트를 주는 주석 컴파일러가 어노테이션을 무시하지 않고 읽음
예) animal 클래스에 run() 메소드가 있고 Animal 클래스를 상속받은 Dog 클래스에 run()이라는 메소드가 있으면 Dog 클래스의 run();위에 어노테이션 @Override를 붙임

스프링 -> 어노테이션 객체 생성
@Component -> 클래스 메모리에 로딩
@Autowired -> 로딩된 객체를 해당 변수에 집어넣어
등의 어노테이션 등을 만들어두면 이 어노테이션들이 어떤 역할을 하는지 미리 약속해서 분석(리플렉션)하고 만듬				@Autowired
메소드,필드,어노테이션 감지해서 동작시키는것도 가능	A a; //new()A는 안적는다.

스프링은 MessageConverter를 가지고 있다. 기본값은 현재 Json이다.
영어 <-> 한글
hello       안녕	
서로 상대가 보낸말 이해못함.. 중간데이터(중간 언어:Xml, Json 등) 를 거쳐서 변환함.
자바 object와 파이썬 object가 서로 데이터 주고받는게 힘드니까 중간에 JSON으로 변경해서 JSON 데이터를 보내고 받음. JSON 데이터를 받아서 해석하고 자기 데이터, 오브젝트로 바꿈 
중간 언어로 메세지를 변환해주고, 중간 언어 메세지를 내 식으로 변환해주는게 MessageConverter이다.(내가 보낼때(request), 내가 받을때(response) 둘다 작동)
ㄴ 스프링의 라이브러리로 존재함, Jackson